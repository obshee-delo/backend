import * as jwt from 'jsonwebtoken';
import { join } from 'path';
import { config } from 'dotenv';
import { writeFileSync } from 'fs'
import { randomBytes } from 'crypto'
import { Environment } from '../config/interfaces/environment';


const hex = (value: any) => value.toString('hex');

/**
 * Used to generate .env file from array of lines.
 */
class EnvironmentFileAssembler {
    private path: string = join(__dirname + '/../.env');
    private lines: string[] = [];

    add(line: any) {
        this.lines.push(line + '');
    }

    pop(): string {
        return this.lines.pop();
    }
    
    clear() {
        this.lines = [];
    }

    commit(eof=true) {
        writeFileSync(this.path, this.lines.join('\n') + (eof ? '\n' : ''));
    }
}

const templatePath = join(__dirname + '/../.env.template');
config({ path: templatePath });

/**
 * Generates environment file from template.
 * 
 * Note: .env is generating automaticly by this script,
 * so be sure to edit default.env first.
 * 
 * Idea source:
 * https://github.com/boticord/backend/blob/main/scripts/generate-environment.ts
 */
async function generateEnvironmentFile(templatePath: string) {
    config({ path: templatePath });

    const assembler = new EnvironmentFileAssembler();

    const {
        NODE_ENV,
        HOSTNAME,
        DATABASE_NAME,
        DATABASE_PORT,
        DATABASE_HOST,
        DATABASE_USER,
        DATABASE_PASSWORD,
        PAYMENTS_APPLICATION_ID,
        PAYMENTS_APPLICATION_SECRET_KEY,
    } = process.env;

    const environment: Partial<Environment> = {
        NODE_ENV,
        HOSTNAME,
        DATABASE_NAME,
        DATABASE_PORT,
        DATABASE_HOST,
        DATABASE_USER,
        DATABASE_PASSWORD,
        PAYMENTS_APPLICATION_ID,
        PAYMENTS_APPLICATION_SECRET_KEY
    };

    environment.JWT_SECRET ||= hex(randomBytes(32));

    environment.NODE_ENV ||= 'development';

    environment.ADMIN_JWT ||= jwt.sign(
        { scope: 'admin', iat: Date.now() },
        environment.JWT_SECRET,
        { algorithm: 'HS256' }
    );

    environment.DATABASE_URI ||= 
        `postgres://${environment.DATABASE_HOST}:${environment.DATABASE_PORT}`+
        `/${environment.DATABASE_NAME}?` + 
        `user=${environment.DATABASE_USER}&`+
        `password=${environment.DATABASE_PASSWORD}&` +
        `application_name=${environment.HOSTNAME}%40api`;

    assembler.add('# Auto-generated by script.\n');

    Object.entries(environment).map(([ k, v ]) => `${k}=${v}`)
        .forEach(variable => assembler.add(variable));

    assembler.commit();
}

generateEnvironmentFile(templatePath);
