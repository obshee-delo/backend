import { join } from 'path';
import { writeFileSync } from 'fs'
import { randomBytes } from 'crypto'
import { config } from 'dotenv';
import { environmentConfigFactory } from '../config/environment.config';


const hex = (value: any) => value.toString('hex');

/**
 * Used to generate .env file from array of lines.
 */
class DotenvAssembler {
    private path: string;
    private lines: string[] = [];

    constructor(path: string) {
        this.path = path;
    }

    add(line: any) {
        this.lines.push(line + '');
    }

    pop(): string {
        return this.lines.pop();
    }
    
    clear() {
        this.lines = [];
    }

    commit(eof=true) {
        writeFileSync(this.path, this.lines.join('\n') + (eof ? '\n' : ''));
    }
}

const sourcePath = join(__dirname + '/../default.env');
const targetPath = join(__dirname + '/../.env');
config({ path: sourcePath });

/**
 * Used to generate some stuff for environment.
 * 
 * Note: .env is generating automaticly by this script,
 * so be sure to edit default.env first.
 * 
 * Idea source:
 * https://github.com/boticord/backend/blob/main/scripts/generate-environment.ts
 */
async function generateEnvironment(dotenvPath) {
    const assembler = new DotenvAssembler(dotenvPath);

    const environmentConfig = environmentConfigFactory();

    environmentConfig.jwtSecret ||= hex(randomBytes(32));

    assembler.add('# Auto-generated by script.\n');

    Object.entries(environmentConfig).map(([ k, v ]) => `${k}=${v}`)
        .forEach(variable => assembler.add(variable));

    assembler.commit();
}

generateEnvironment(targetPath);
